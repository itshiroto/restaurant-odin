/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={66:(e,t,n)=>{var o={"./bg.jpg":439,"./menu.png":446};function r(e){var t=i(e);return n(t)}function i(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}r.keys=function(){return Object.keys(o)},r.resolve=i,e.exports=r,r.id=66},534:(e,t,n)=>{"use strict";const o=JSON.parse('[{"title":"Home","href":"?page=home"},{"title":"Menu","href":"?page=menu"},{"title":"Contact","href":"?page=contact"}]');var r=n(413);r=r.home;const i=()=>{const e=document.createElement("section");e.id="home";const t=gt();return t.append((()=>{const e=yt.subtitle(r.subtitle);return e.id="home-subtitle",e})(),(()=>{const e=yt.title(r.title);return e.id="home-title",e})(),(()=>{const e=yt.description(r.desc);return e.id="home-description",e})()),t.id="home-element",e.appendChild(t),e},c=JSON.parse('[{"name":"Nasi Goreng Super","price":"Rp15.000","desc":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis volutpat orci sagittis, scelerisque enim eu, dapibus sem.","img":"menu.png"},{"name":"Mi Goreng Jembatan Sambaliung","price":"Rp10.000","desc":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis volutpat orci sagittis, scelerisque enim eu, dapibus sem.","img":"menu.png"},{"name":"Caviar Sungai Segah","price":"Rp80.000","desc":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis volutpat orci sagittis, scelerisque enim eu, dapibus sem.","img":"menu.png"}]');r=r.menu;function s(){const e=gt();return e.appendChild((()=>{const e=document.createElement("div");return e.append((()=>{const e=yt.title(r.title);return e.id="menu-title",e})(),(()=>{const e=yt.subtitle(r.subtitle);return e.id="menu-subtitle",e})()),e.id="menu-header",e.classList.add("header"),e})()),e.appendChild(function(){const e=document.createElement("div");return e.id="menu-list",c.forEach((t=>{e.appendChild(wt(t).el)})),e}()),e}var a=/^[a-z0-9]+(-[a-z0-9]+)*$/,l=Object.freeze({left:0,top:0,width:16,height:16,rotate:0,vFlip:!1,hFlip:!1});function u(e){return{...l,...e}}function d(e,t,n=!1){const o=function t(n,o){var r,i,c,s;if(void 0!==e.icons[n])return Object.assign({},e.icons[n]);if(o>5)return null;if(void 0!==(null==(r=e.aliases)?void 0:r[n])){const r=null==(i=e.aliases)?void 0:i[n],c=t(r.parent,o+1);return c?function(e,t){const n={...e};for(const e in l){const o=e;if(void 0!==t[o]){const e=t[o];if(void 0===n[o]){n[o]=e;continue}switch(o){case"rotate":n[o]=(n[o]+e)%4;break;case"hFlip":case"vFlip":n[o]=e!==n[o];break;default:n[o]=e}}}return n}(c,r):c}return 0===o&&void 0!==(null==(c=e.chars)?void 0:c[n])?t(null==(s=e.chars)?void 0:s[n],o+1):null}(t,0);if(o)for(const t in l)void 0===o[t]&&void 0!==e[t]&&(o[t]=e[t]);return o&&n?u(o):o}var f=/^[a-f0-9]+(-[a-f0-9]+)*$/;function p(e,t){for(const n in e){const o=n,r=typeof e[o];if("undefined"!==r)switch(n){case"body":case"parent":if("string"!==r)return n;break;case"hFlip":case"vFlip":case"hidden":if("boolean"!==r){if(!t)return n;delete e[o]}break;case"width":case"height":case"left":case"top":case"rotate":case"inlineHeight":case"inlineTop":case"verticalAlign":if("number"!==r){if(!t)return n;delete e[o]}break;default:if("object"===r){if(!t)return n;delete e[o]}}else delete e[o]}return null}function h(e,t,n){n=n||{};const o=[];if("object"!=typeof e||"object"!=typeof e.icons)return o;const r=n.validate;if(!1!==r)try{!function(e,t){const n=!!(null==t?void 0:t.fix);if("object"!=typeof e||null===e||"object"!=typeof e.icons||!e.icons)throw new Error("Bad icon set");const o=e;if("string"==typeof(null==t?void 0:t.prefix))o.prefix=t.prefix;else if("string"!=typeof o.prefix||!o.prefix.match(a))throw new Error("Invalid prefix");if("string"==typeof(null==t?void 0:t.provider))o.provider=t.provider;else if(void 0!==o.provider){const e=o.provider;if("string"!=typeof e||""!==e&&!e.match(a)){if(!n)throw new Error("Invalid provider");delete o.provider}}const r=o.icons;if(Object.keys(r).forEach((e=>{if(!e.match(a)){if(n)return void delete r[e];throw new Error(`Invalid icon name: "${e}"`)}const t=r[e];if("object"!=typeof t||null===t||"string"!=typeof t.body){if(n)return void delete r[e];throw new Error(`Invalid icon: "${e}"`)}const o="string"==typeof t.parent?"parent":p(t,n);if(null!==o){if(n)return void delete r[e];throw new Error(`Invalid property "${o}" in icon "${e}"`)}})),!Object.keys(o.icons).length)throw new Error("Icon set is empty");if(void 0!==o.aliases&&("object"!=typeof o.aliases||null===o.aliases)){if(!n)throw new Error("Invalid aliases list");delete o.aliases}if("object"==typeof o.aliases){let e=function(c,s){if(r.has(c))return!i.has(c);const l=t[c];if(s>5||"object"!=typeof l||null===l||"string"!=typeof l.parent||!c.match(a)){if(n)return delete t[c],i.add(c),!1;throw new Error(`Invalid icon alias: "${c}"`)}const u=l.parent;if(void 0===o.icons[u]&&(void 0===t[u]||!e(u,s+1))){if(n)return delete t[c],i.add(c),!1;throw new Error(`Missing parent icon for alias "${c}`)}n&&void 0!==l.body&&delete l.body;const d=void 0!==l.body?"body":p(l,n);if(null!==d){if(n)return delete t[c],i.add(c),!1;throw new Error(`Invalid property "${d}" in alias "${c}"`)}return r.add(c),!0};const t=o.aliases,r=new Set,i=new Set;Object.keys(t).forEach((t=>{e(t,0)})),n&&!Object.keys(o.aliases).length&&delete o.aliases}if(Object.keys(l).forEach((e=>{const t=typeof l[e],n=typeof o[e];if("undefined"!==n&&n!==t)throw new Error(`Invalid value type for "${e}"`)})),void 0!==o.chars&&("object"!=typeof o.chars||null===o.chars)){if(!n)throw new Error("Invalid characters map");delete o.chars}if("object"==typeof o.chars){const e=o.chars;Object.keys(e).forEach((t=>{var r;if(!t.match(f)||"string"!=typeof e[t]){if(n)return void delete e[t];throw new Error(`Invalid character "${t}"`)}const i=e[t];if(void 0===o.icons[i]&&void 0===(null==(r=o.aliases)?void 0:r[i])){if(n)return void delete e[t];throw new Error(`Character "${t}" points to missing icon "${i}"`)}})),n&&!Object.keys(o.chars).length&&delete o.chars}}(e,"object"==typeof r?r:{fix:!0})}catch(e){return o}e.not_found instanceof Array&&e.not_found.forEach((e=>{t(e,null),o.push(e)}));const i=e.icons;Object.keys(i).forEach((n=>{const r=d(e,n,!0);r&&(t(n,r),o.push(n))}));const c=n.aliases||"all";if("none"!==c&&"object"==typeof e.aliases){const n=e.aliases;Object.keys(n).forEach((r=>{if("variations"===c&&function(e){for(const t in l)if(void 0!==e[t])return!0;return!1}(n[r]))return;const i=d(e,r,!0);i&&(t(r,i),o.push(r))}))}return o}var m=(e,t,n,o="")=>{const r=e.split(":");if("@"===e.slice(0,1)){if(r.length<2||r.length>3)return null;o=r.shift().slice(1)}if(r.length>3||!r.length)return null;if(r.length>1){const e=r.pop(),n=r.pop(),i={provider:r.length>0?r[0]:o,prefix:n,name:e};return t&&!v(i)?null:i}const i=r[0],c=i.split("-");if(c.length>1){const e={provider:o,prefix:c.shift(),name:c.join("-")};return t&&!v(e)?null:e}if(n&&""===o){const e={provider:o,prefix:"",name:i};return t&&!v(e,n)?null:e}return null},v=(e,t)=>!!e&&!(""!==e.provider&&!e.provider.match(a)||!(t&&""===e.prefix||e.prefix.match(a))||!e.name.match(a)),g=Object.create(null);function b(e,t){void 0===g[e]&&(g[e]=Object.create(null));const n=g[e];return void 0===n[t]&&(n[t]=function(e,t){return{provider:e,prefix:t,icons:Object.create(null),missing:Object.create(null)}}(e,t)),n[t]}function y(e,t){const n=Date.now();return h(t,((t,o)=>{o?e.icons[t]=o:e.missing[t]=n}))}function w(e,t){const n=e.icons[t];return void 0===n?null:n}var x=!1;function j(e){const t="string"==typeof e?m(e,!0,x):e;return t?w(b(t.provider,t.prefix),t.name):null}function E(e,t){const n=m(e,!0,x);return!!n&&function(e,t,n){try{if("string"==typeof n.body)return e.icons[t]=Object.freeze(u(n)),!0}catch(e){}return!1}(b(n.provider,n.prefix),n.name,t)}function O(e,t){if("object"!=typeof e)return!1;if("string"!=typeof t&&(t="string"==typeof e.provider?e.provider:""),x&&""===t&&("string"!=typeof e.prefix||""===e.prefix)){let t=!1;return h(e,((e,n)=>{n&&E(e,n)&&(t=!0)}),{validate:{fix:!0,prefix:""}}),t}return!("string"!=typeof e.prefix||!v({provider:t,prefix:e.prefix,name:"a"}))&&!!y(b(t,e.prefix),e)}var k=Object.freeze({inline:!1,width:null,height:null,hAlign:"center",vAlign:"middle",slice:!1,hFlip:!1,vFlip:!1,rotate:0});function I(e,t){const n={};for(const o in e){const r=o;if(n[r]=e[r],void 0===t[r])continue;const i=t[r];switch(r){case"inline":case"slice":"boolean"==typeof i&&(n[r]=i);break;case"hFlip":case"vFlip":!0===i&&(n[r]=!n[r]);break;case"hAlign":case"vAlign":"string"==typeof i&&""!==i&&(n[r]=i);break;case"width":case"height":("string"==typeof i&&""!==i||"number"==typeof i&&i||null===i)&&(n[r]=i);break;case"rotate":"number"==typeof i&&(n[r]+=i)}}return n}var C=/(-?[0-9.]*[0-9]+[0-9.]*)/g,L=/^-?[0-9.]*[0-9]+[0-9.]*$/g;function A(e,t,n){if(1===t)return e;if(n=void 0===n?100:n,"number"==typeof e)return Math.ceil(e*t*n)/n;if("string"!=typeof e)return e;const o=e.split(C);if(null===o||!o.length)return e;const r=[];let i=o.shift(),c=L.test(i);for(;;){if(c){const e=parseFloat(i);isNaN(e)?r.push(i):r.push(Math.ceil(e*t*n)/n)}else r.push(i);if(i=o.shift(),void 0===i)return r.join("");c=!c}}function S(e){let t="";switch(e.hAlign){case"left":t+="xMin";break;case"right":t+="xMax";break;default:t+="xMid"}switch(e.vAlign){case"top":t+="YMin";break;case"bottom":t+="YMax";break;default:t+="YMid"}return t+=e.slice?" slice":" meet",t}function M(e,t){const n={left:e.left,top:e.top,width:e.width,height:e.height};let o,r,i=e.body;[e,t].forEach((e=>{const t=[],o=e.hFlip,r=e.vFlip;let c,s=e.rotate;switch(o?r?s+=2:(t.push("translate("+(n.width+n.left)+" "+(0-n.top)+")"),t.push("scale(-1 1)"),n.top=n.left=0):r&&(t.push("translate("+(0-n.left)+" "+(n.height+n.top)+")"),t.push("scale(1 -1)"),n.top=n.left=0),s<0&&(s-=4*Math.floor(s/4)),s%=4,s){case 1:c=n.height/2+n.top,t.unshift("rotate(90 "+c+" "+c+")");break;case 2:t.unshift("rotate(180 "+(n.width/2+n.left)+" "+(n.height/2+n.top)+")");break;case 3:c=n.width/2+n.left,t.unshift("rotate(-90 "+c+" "+c+")")}s%2==1&&(0===n.left&&0===n.top||(c=n.left,n.left=n.top,n.top=c),n.width!==n.height&&(c=n.width,n.width=n.height,n.height=c)),t.length&&(i='<g transform="'+t.join(" ")+'">'+i+"</g>")})),null===t.width&&null===t.height?(r="1em",o=A(r,n.width/n.height)):null!==t.width&&null!==t.height?(o=t.width,r=t.height):null!==t.height?(r=t.height,o=A(r,n.width/n.height)):(o=t.width,r=A(o,n.height/n.width)),"auto"===o&&(o=n.width),"auto"===r&&(r=n.height),o="string"==typeof o?o:o+"",r="string"==typeof r?r:r+"";const c={attributes:{width:o,height:r,preserveAspectRatio:S(t),viewBox:n.left+" "+n.top+" "+n.width+" "+n.height},body:i};return t.inline&&(c.inline=!0),c}var T=/\sid="(\S+)"/g,F="IconifyId-"+Date.now().toString(16)+"-"+(16777216*Math.random()|0).toString(16)+"-",$=0;function N(e,t=F){const n=[];let o;for(;o=T.exec(e);)n.push(o[1]);return n.length?(n.forEach((n=>{const o="function"==typeof t?t(n):t+$++,r=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");e=e.replace(new RegExp('([#;"])('+r+')([")]|\\.[a-z])',"g"),"$1"+o+"$3")})),e):e}var P="iconify2",D="iconify",R="iconify-count",H="iconify-version",U=36e5,q={local:!0,session:!0},z=!1,J={local:0,session:0},_={local:[],session:[]},B="undefined"==typeof window?{}:window;function G(e){const t=e+"Storage";try{if(B&&B[t]&&"number"==typeof B[t].length)return B[t]}catch(e){}return q[e]=!1,null}function Y(e,t,n){try{return e.setItem(R,n+""),J[t]=n,!0}catch(e){return!1}}function Q(e){const t=e.getItem(R);if(t){return parseInt(t)||0}return 0}var V=()=>{if(z)return;z=!0;const e=Math.floor(Date.now()/U)-168;function t(t){const n=G(t);if(!n)return;const o=t=>{const o=D+t,r=n.getItem(o);if("string"!=typeof r)return!1;let i=!0;try{const t=JSON.parse(r);if("object"!=typeof t||"number"!=typeof t.cached||t.cached<e||"string"!=typeof t.provider||"object"!=typeof t.data||"string"!=typeof t.data.prefix)i=!1;else{const e=t.provider;i=y(b(e,t.data.prefix),t.data).length>0}}catch(e){i=!1}return i||n.removeItem(o),i};try{const e=n.getItem(H);if(e!==P)return e&&function(e){try{const t=Q(e);for(let n=0;n<t;n++)e.removeItem(D+n)}catch(e){}}(n),void function(e,t){try{e.setItem(H,P)}catch(e){}Y(e,t,0)}(n,t);let r=Q(n);for(let e=r-1;e>=0;e--)o(e)||(e===r-1?r--:_[t].push(e));Y(n,t,r)}catch(e){}}for(const e in q)t(e)},K={};function W(e,t){switch(e){case"local":case"session":q[e]=t;break;case"all":for(const e in q)q[e]=t}}var X=Object.create(null);function Z(e,t){X[e]=t}function ee(e){return X[e]||X[""]}function te(e){let t;if("string"==typeof e.resources)t=[e.resources];else if(t=e.resources,!(t instanceof Array&&t.length))return null;return{resources:t,path:void 0===e.path?"/":e.path,maxURL:e.maxURL?e.maxURL:500,rotate:e.rotate?e.rotate:750,timeout:e.timeout?e.timeout:5e3,random:!0===e.random,index:e.index?e.index:0,dataAfterTimeout:!1!==e.dataAfterTimeout}}for(var ne=Object.create(null),oe=["https://api.simplesvg.com","https://api.unisvg.com"],re=[];oe.length>0;)1===oe.length||Math.random()>.5?re.push(oe.shift()):re.push(oe.pop());function ie(e,t){const n=te(t);return null!==n&&(ne[e]=n,!0)}function ce(e){return ne[e]}ne[""]=te({resources:["https://api.iconify.design"].concat(re)});var se=(e,t)=>{let n=e,o=-1!==n.indexOf("?");return Object.keys(t).forEach((e=>{let r;try{r=function(e){switch(typeof e){case"boolean":return e?"true":"false";case"number":case"string":return encodeURIComponent(e);default:throw new Error("Invalid parameter")}}(t[e])}catch(e){return}n+=(o?"&":"?")+encodeURIComponent(e)+"="+r,o=!0})),n},ae=null,le=null,ue=Object.create(null),de=Object.create(null);function fe(){if(null===ae){const e=self;let t="Iconify",n=".cb";if(void 0===e[t])t="IconifyJSONP",n="",void 0===e[t]&&(e[t]=Object.create(null)),ae=e[t];else{const n=e[t];void 0===n.cb&&(n.cb=Object.create(null)),ae=n.cb}le=t+n+".{cb}"}return ae}var pe={prepare:(e,t,n)=>{const o=[];let r=ue[e+":"+t];void 0===r&&(r=function(e,t){const n=ce(e);if(!n)return 0;let o;if(n.maxURL){let e=0;n.resources.forEach((t=>{const n=t;e=Math.max(e,n.length)})),fe();const r=se(t+".js",{icons:"",callback:le});o=n.maxURL-e-n.path.length-r.length}else o=0;const r=e+":"+t;return de[r]=n.path,ue[r]=o,o}(e,t));const i="icons";let c={type:i,provider:e,prefix:t,icons:[]},s=0;return n.forEach(((n,a)=>{s+=n.length+1,s>=r&&a>0&&(o.push(c),c={type:i,provider:e,prefix:t,icons:[]},s=n.length),c.icons.push(n)})),o.push(c),o},send:(e,t,n)=>{if("icons"!==t.type)return void n.done(void 0,400);const o=t.provider,r=t.prefix,i=t.icons.join(","),c=o+":"+r,s=r.split("-").shift().slice(0,3),a=fe();let l=function(e){let t,n=0;for(t=e.length-1;t>=0;t--)n+=e.charCodeAt(t);return n%999}(o+":"+e+":"+r+":"+i);for(;void 0!==a[s+l];)l++;const u=s+l,d=se(r+".js",{icons:i,callback:le.replace("{cb}",u)}),f=de[c]+d;a[u]=e=>{delete a[u],n.done(e)};const p=e+f,h=document.createElement("script");h.type="text/javascript",h.async=!0,h.src=p,document.head.appendChild(h)}},he=Object.create(null),me=Object.create(null),ve=(()=>{let e;try{if(e=fetch,"function"==typeof e)return e}catch(e){}try{const t=String.fromCharCode(114)+String.fromCharCode(101);if(e=(0,global[t+"qui"+t])("cross-fetch"),"function"==typeof e)return e}catch(e){}return null})(),ge={prepare:(e,t,n)=>{const o=[];let r=he[t];void 0===r&&(r=function(e,t){const n=ce(e);if(!n)return 0;let o;if(n.maxURL){let e=0;n.resources.forEach((t=>{const n=t;e=Math.max(e,n.length)}));const r=se(t+".json",{icons:""});o=n.maxURL-e-n.path.length-r.length}else o=0;const r=e+":"+t;return me[e]=n.path,he[r]=o,o}(e,t));const i="icons";let c={type:i,provider:e,prefix:t,icons:[]},s=0;return n.forEach(((n,a)=>{s+=n.length+1,s>=r&&a>0&&(o.push(c),c={type:i,provider:e,prefix:t,icons:[]},s=n.length),c.icons.push(n)})),o.push(c),o},send:(e,t,n)=>{if(!ve)return void n.done(void 0,424);let o=function(e){if("string"==typeof e){if(void 0===me[e]){const t=ce(e);if(!t)return"/";me[e]=t.path}return me[e]}return"/"}(t.provider);switch(t.type){case"icons":{const e=t.prefix,n=t.icons.join(",");o+=se(e+".json",{icons:n});break}case"custom":{const e=t.uri;o+="/"===e.slice(0,1)?e.slice(1):e;break}default:return void n.done(void 0,400)}let r=503;ve(e+o).then((e=>{if(200===e.status)return r=501,e.json();setTimeout((()=>{n.done(void 0,e.status)}))})).then((e=>{"object"==typeof e&&null!==e?setTimeout((()=>{n.done(e)})):setTimeout((()=>{n.done(void 0,r)}))})).catch((()=>{n.done(void 0,r)}))}},be=Object.create(null),ye=Object.create(null);function we(e,t){e.forEach((e=>{const n=e.provider;if(void 0===be[n])return;const o=be[n],r=e.prefix,i=o[r];i&&(o[r]=i.filter((e=>e.id!==t)))}))}var xe=0,je={resources:[],index:0,timeout:2e3,rotate:750,random:!1,dataAfterTimeout:!1};function Ee(e){const t=function(e){if(!("object"==typeof e&&"object"==typeof e.resources&&e.resources instanceof Array&&e.resources.length))throw new Error("Invalid Reduncancy configuration");const t=Object.create(null);let n;for(n in je)void 0!==e[n]?t[n]=e[n]:t[n]=je[n];return t}(e);let n=[];function o(){n=n.filter((e=>"pending"===e().status))}const r={query:function(e,r,i){const c=function(e,t,n,o,r){const i=e.resources.length,c=e.random?Math.floor(Math.random()*i):e.index;let s;if(e.random){let t=e.resources.slice(0);for(s=[];t.length>1;){const e=Math.floor(Math.random()*t.length);s.push(t[e]),t=t.slice(0,e).concat(t.slice(e+1))}s=s.concat(t)}else s=e.resources.slice(c).concat(e.resources.slice(0,c));const a=Date.now();let l,u="pending",d=0,f=null,p=[],h=[];function m(){f&&(clearTimeout(f),f=null)}function v(){"pending"===u&&(u="aborted"),m(),p.forEach((e=>{e.abort&&e.abort(),"pending"===e.status&&(e.status="aborted")})),p=[]}function g(e,t){t&&(h=[]),"function"==typeof e&&h.push(e)}function b(){return{startTime:a,payload:t,status:u,queriesSent:d,queriesPending:p.length,subscribe:g,abort:v}}function y(){u="failed",h.forEach((e=>{e(void 0,l)}))}function w(){p=p.filter((e=>("pending"===e.status&&(e.status="aborted"),e.abort&&e.abort(),!1)))}return"function"==typeof o&&h.push(o),setTimeout((function o(){if("pending"!==u)return;m();const i=s.shift();if(void 0===i){if(p.length){const t="function"==typeof e.timeout?e.timeout(a):e.timeout;if(t)return void(f=setTimeout((()=>{m(),"pending"===u&&(w(),y())}),t))}return void y()}const c={getQueryStatus:b,status:"pending",resource:i,done:(t,n)=>{!function(t,n,i){const c=void 0===n;switch(p=p.filter((e=>e!==t)),u){case"pending":break;case"failed":if(c||!e.dataAfterTimeout)return;break;default:return}if(c)return void 0!==i&&(l=i),void(p.length||(s.length?o():y()));if(m(),w(),r&&!e.random){const n=e.resources.indexOf(t.resource);-1!==n&&n!==e.index&&r(n)}u="completed",h.forEach((e=>{e(n)}))}(c,t,n)}};p.push(c),d++;const v="function"==typeof e.rotate?e.rotate(d,a):e.rotate;f=setTimeout(o,v),n(i,t,c)})),b}(t,e,r,((e,t)=>{o(),i&&i(e,t)}),(e=>{t.index=e}));return n.push(c),c},find:function(e){const t=n.find((t=>e(t)));return void 0!==t?t:null},setIndex:e=>{t.index=e},getIndex:()=>t.index,cleanup:o};return r}function Oe(){}var ke=Object.create(null);function Ie(e,t,n){let o,r;if("string"==typeof e){const t=ee(e);if(!t)return n(void 0,424),Oe;r=t.send;const i=function(e){if(void 0===ke[e]){const t=ce(e);if(!t)return;const n={config:t,redundancy:Ee(t)};ke[e]=n}return ke[e]}(e);i&&(o=i.redundancy)}else{const t=te(e);if(t){o=Ee(t);const n=ee(e.resources?e.resources[0]:"");n&&(r=n.send)}}return o&&r?o.query(t,r,n)().abort:(n(void 0,424),Oe)}function Ce(){}var Le=Object.create(null),Ae=Object.create(null),Se=Object.create(null),Me=Object.create(null);var Te=Object.create(null);function Fe(e,t,n){void 0===Ae[e]&&(Ae[e]=Object.create(null));const o=Ae[e];void 0===Me[e]&&(Me[e]=Object.create(null));const r=Me[e];void 0===Le[e]&&(Le[e]=Object.create(null));const i=Le[e];void 0===o[t]?o[t]=n:o[t]=o[t].concat(n).sort(),r[t]||(r[t]=!0,setTimeout((()=>{r[t]=!1;const n=o[t];delete o[t];const c=ee(e);c?c.prepare(e,t,n).forEach((n=>{Ie(e,n,((o,r)=>{const c=b(e,t);if("object"!=typeof o){if(404!==r)return;const e=Date.now();n.icons.forEach((t=>{c.missing[t]=e}))}else try{const n=y(c,o);if(!n.length)return;const r=i[t];n.forEach((e=>{delete r[e]})),K.store&&K.store(e,o)}catch(e){console.error(e)}!function(e,t){void 0===Se[e]&&(Se[e]=Object.create(null));const n=Se[e];n[t]||(n[t]=!0,setTimeout((()=>{n[t]=!1,function(e,t){void 0===ye[e]&&(ye[e]=Object.create(null));const n=ye[e];n[t]||(n[t]=!0,setTimeout((()=>{if(n[t]=!1,void 0===be[e]||void 0===be[e][t])return;const o=be[e][t].slice(0);if(!o.length)return;const r=b(e,t);let i=!1;o.forEach((n=>{const o=n.icons,c=o.pending.length;o.pending=o.pending.filter((n=>{if(n.prefix!==t)return!0;const c=n.name;if(void 0!==r.icons[c])o.loaded.push({provider:e,prefix:t,name:c});else{if(void 0===r.missing[c])return i=!0,!0;o.missing.push({provider:e,prefix:t,name:c})}return!1})),o.pending.length!==c&&(i||we([{provider:e,prefix:t}],n.id),n.callback(o.loaded.slice(0),o.missing.slice(0),o.pending.slice(0),n.abort))}))})))}(e,t)})))}(e,t)}))})):function(){const n=(""===e?"":"@"+e+":")+t,o=Math.floor(Date.now()/6e4);Te[n]<o&&(Te[n]=o,console.error('Unable to retrieve icons for "'+n+'" because API is not configured properly.'))}()})))}var $e=e=>{const t=e.provider,n=e.prefix;return Le[t]&&Le[t][n]&&void 0!==Le[t][n][e.name]},Ne=(e,t)=>{const n=function(e){const t={loaded:[],missing:[],pending:[]},n=Object.create(null);e.sort(((e,t)=>e.provider!==t.provider?e.provider.localeCompare(t.provider):e.prefix!==t.prefix?e.prefix.localeCompare(t.prefix):e.name.localeCompare(t.name)));let o={provider:"",prefix:"",name:""};return e.forEach((e=>{if(o.name===e.name&&o.prefix===e.prefix&&o.provider===e.provider)return;o=e;const r=e.provider,i=e.prefix,c=e.name;void 0===n[r]&&(n[r]=Object.create(null));const s=n[r];void 0===s[i]&&(s[i]=b(r,i));const a=s[i];let l;l=void 0!==a.icons[c]?t.loaded:""===i||void 0!==a.missing[c]?t.missing:t.pending;const u={provider:r,prefix:i,name:c};l.push(u)})),t}(function(e,t=!0,n=!1){const o=[];return e.forEach((e=>{const r="string"==typeof e?m(e,!1,n):e;t&&!v(r,n)||o.push({provider:r.provider,prefix:r.prefix,name:r.name})})),o}(e,!0,x));if(!n.pending.length){let e=!0;return t&&setTimeout((()=>{e&&t(n.loaded,n.missing,n.pending,Ce)})),()=>{e=!1}}const o=Object.create(null),r=[];let i,c;n.pending.forEach((e=>{const t=e.provider,n=e.prefix;if(n===c&&t===i)return;i=t,c=n,r.push({provider:t,prefix:n}),void 0===Le[t]&&(Le[t]=Object.create(null));const s=Le[t];void 0===s[n]&&(s[n]=Object.create(null)),void 0===o[t]&&(o[t]=Object.create(null));const a=o[t];void 0===a[n]&&(a[n]=[])}));const s=Date.now();return n.pending.forEach((e=>{const t=e.provider,n=e.prefix,r=e.name,i=Le[t][n];void 0===i[r]&&(i[r]=s,o[t][n].push(r))})),r.forEach((e=>{const t=e.provider,n=e.prefix;o[t][n].length&&Fe(t,n,o[t][n])})),t?function(e,t,n){const o=xe++,r=we.bind(null,n,o);if(!t.pending.length)return r;const i={id:o,icons:t,callback:e,abort:r};return n.forEach((e=>{const t=e.provider,n=e.prefix;void 0===be[t]&&(be[t]=Object.create(null));const o=be[t];void 0===o[n]&&(o[n]=[]),o[n].push(i)})),r}(t,n,r):Ce};const Pe="iconifyFinder"+Date.now(),De="iconifyData"+Date.now();function Re(e,t,n,o){let r;try{r=document.createElement("span")}catch(e){return o?"":null}const i=M(n,I(k,t)),c=e.element,s=e.finder,a=e.name,l=c?c.getAttribute("class"):"",u=s?s.classFilter(l?l.split(/\s+/):[]):[],d='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--'+a.prefix+(""===a.provider?"":" iconify--"+a.provider)+(u.length?" "+u.join(" "):"")+'">'+N(i.body)+"</svg>";r.innerHTML=d;const f=r.childNodes[0],p=f.style,h=i.attributes;if(Object.keys(h).forEach((e=>{f.setAttribute(e,h[e])})),i.inline&&(p.verticalAlign="-0.125em"),c){const e=c.attributes;for(let t=0;t<e.length;t++){const n=e.item(t);if(n){const e=n.name;if("class"!==e&&"style"!==e&&void 0===h[e])try{f.setAttribute(e,n.value)}catch(e){}}}const t=c.style;for(let e=0;e<t.length;e++){const n=t[e];p[n]=t[n]}}if(s){const e={name:a,status:"loaded",customisations:t};f[De]=e,f[Pe]=s}const m=o?r.innerHTML:f;return c&&c.parentNode?c.parentNode.replaceChild(f,c):r.removeChild(f),m}let He=[];function Ue(e){for(let t=0;t<He.length;t++){const n=He[t];if(("function"==typeof n.node?n.node():n.node)===e)return n}}function qe(e,t=!1){let n=Ue(e);return n?(n.temporary&&(n.temporary=t),n):(n={node:e,temporary:t},He.push(n),n)}function ze(){return He}let Je=null;const _e={childList:!0,subtree:!0,attributes:!0};function Be(e){if(!e.observer)return;const t=e.observer;t.pendingScan||(t.pendingScan=setTimeout((()=>{delete t.pendingScan,Je&&Je(e)})))}function Ge(e,t){if(!e.observer)return;const n=e.observer;if(!n.pendingScan)for(let o=0;o<t.length;o++){const r=t[o];if(r.addedNodes&&r.addedNodes.length>0||"attributes"===r.type&&void 0!==r.target[Pe])return void(n.paused||Be(e))}}function Ye(e,t){e.observer.instance.observe(t,_e)}function Qe(e){let t=e.observer;if(t&&t.instance)return;const n="function"==typeof e.node?e.node():e.node;n&&(t||(t={paused:0},e.observer=t),t.instance=new MutationObserver(Ge.bind(null,e)),Ye(e,n),t.paused||Be(e))}function Ve(){ze().forEach(Qe)}function Ke(e){if(!e.observer)return;const t=e.observer;t.pendingScan&&(clearTimeout(t.pendingScan),delete t.pendingScan),t.instance&&(t.instance.disconnect(),delete t.instance)}function We(e){(e?[e]:ze()).forEach((e=>{if(!e.observer)return void(e.observer={paused:1});const t=e.observer;t.paused++,t.paused>1||!t.instance||t.instance.disconnect()}))}function Xe(e){(e?[e]:ze()).forEach((e=>{if(!e.observer)return void Qe(e);const t=e.observer;if(t.paused&&(t.paused--,!t.paused)){const n="function"==typeof e.node?e.node():e.node;if(!n)return;t.instance?Ye(e,n):Qe(e)}}))}function Ze(e,t=!1){const n=qe(e,t);return Qe(n),n}function et(e){const t=Ue(e);t&&(Ke(t),function(e){He=He.filter((t=>{const n="function"==typeof t.node?t.node():t.node;return e!==n}))}(e))}const tt=[];function nt(e){return"string"==typeof e&&(e=m(e)),null!==e&&v(e)?e:null}let ot=!1;function rt(){ot||(ot=!0,setTimeout((()=>{ot&&(ot=!1,it())})))}function it(e,t=!1){ot=!1;const n=Object.create(null);(e?[e]:ze()).forEach((e=>{const o="function"==typeof e.node?e.node():e.node;if(!o||!o.querySelectorAll)return;let r=!1,i=!1;(function(e){const t=[];tt.forEach((n=>{const o=n.find(e);Array.prototype.forEach.call(o,(e=>{const o=e;if(void 0!==o[Pe]&&o[Pe]!==n)return;const r=nt(n.name(o));if(null===r)return;o[Pe]=n;const i={element:o,finder:n,name:r};t.push(i)}))}));const n=e.querySelectorAll("svg.iconify");return Array.prototype.forEach.call(n,(e=>{const n=e,o=n[Pe],r=n[De];if(!o||!r)return;const i=nt(o.name(n));if(null===i)return;let c,s=!1;if(i.prefix!==r.name.prefix||i.name!==r.name.name?s=!0:(c=o.customisations(n),function(e,t){const n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(let o=0;o<n.length;o++){const r=n[o];if(t[r]!==e[r])return!1}return!0}(r.customisations,c)||(s=!0)),s){const e={element:n,finder:o,name:i,customisations:c};t.push(e)}})),t})(o).forEach((t=>{const o=t.element,c=t.name,s=c.provider,a=c.prefix,l=c.name;let u=o[De];if(void 0!==u&&(f=c,null!==(d=u.name)&&null!==f&&d.name===f.name&&d.prefix===f.prefix))switch(u.status){case"missing":return;case"loading":if($e({provider:s,prefix:a,name:l}))return void(r=!0)}var d,f;const p=b(s,a);if(void 0===p.icons[l]){if(p.missing[l])return u={name:c,status:"missing",customisations:{}},void(o[De]=u);if(!$e({provider:s,prefix:a,name:l})){void 0===n[s]&&(n[s]=Object.create(null));const e=n[s];void 0===e[a]&&(e[a]=Object.create(null)),e[a][l]=!0}u={name:c,status:"loading",customisations:{}},o[De]=u,r=!0}else{!i&&e.observer&&(We(e),i=!0);const n=void 0!==t.customisations?t.customisations:t.finder.customisations(o);Re(t,n,w(p,l))}})),e.temporary&&!r?et(o):t&&r?Ze(o,!0):i&&e.observer&&Xe(e)})),Object.keys(n).forEach((e=>{const t=n[e];Object.keys(t).forEach((n=>{Ne(Object.keys(t[n]).map((t=>({provider:e,prefix:n,name:t}))),rt)}))}))}var ct=/[\s,]+/;function st(e,t){return e.hasAttribute(t)}function at(e,t){return e.getAttribute(t)}const lt=["inline","hFlip","vFlip"],ut=["width","height"],dt={find:e=>e.querySelectorAll("i.iconify, span.iconify, i.iconify-inline, span.iconify-inline"),name:e=>st(e,"data-icon")?at(e,"data-icon"):null,customisations:(e,t={inline:!1})=>{const n=t,o=e.getAttribute("class");if(-1!==(o?o.split(/\s+/):[]).indexOf("iconify-inline")&&(n.inline=!0),st(e,"data-rotate")){const t=function(e,t=0){const n=e.replace(/^-?[0-9.]*/,"");function o(e){for(;e<0;)e+=4;return e%4}if(""===n){const t=parseInt(e);return isNaN(t)?0:o(t)}if(n!==e){let t=0;switch(n){case"%":t=25;break;case"deg":t=90}if(t){let r=parseFloat(e.slice(0,e.length-n.length));return isNaN(r)?0:(r/=t,r%1==0?o(r):0)}}return t}(at(e,"data-rotate"));t&&(n.rotate=t)}var r;return st(e,"data-flip")&&(r=n,at(e,"data-flip").split(ct).forEach((e=>{switch(e.trim()){case"horizontal":r.hFlip=!0;break;case"vertical":r.vFlip=!0}}))),st(e,"data-align")&&function(e,t){t.split(ct).forEach((t=>{const n=t.trim();switch(n){case"left":case"center":case"right":e.hAlign=n;break;case"top":case"middle":case"bottom":e.vAlign=n;break;case"slice":case"crop":e.slice=!0;break;case"meet":e.slice=!1}}))}(n,at(e,"data-align")),lt.forEach((t=>{if(st(e,"data-"+t)){const o=function(e,t){const n=e.getAttribute(t);return n===t||"true"===n||""!==n&&"false"!==n&&null}(e,"data-"+t);"boolean"==typeof o&&(n[t]=o)}})),ut.forEach((t=>{if(st(e,"data-"+t)){const o=at(e,"data-"+t);""!==o&&(n[t]=o)}})),n},classFilter:e=>{const t=[];return e.forEach((e=>{"iconify"!==e&&""!==e&&"iconify--"!==e.slice(0,9)&&t.push(e)})),t}};function ft(e,t,n){const o=j(e);return o?Re({name:m(e)},I(k,"object"==typeof t?t:{}),o,n):null}if("undefined"!=typeof document&&"undefined"!=typeof window){!function(){if(document.documentElement)return qe(document.documentElement);He.push({node:()=>document.documentElement})}(),function(e){-1===tt.indexOf(e)&&tt.push(e)}(dt);const e=window;if(void 0!==e.IconifyPreload){const t=e.IconifyPreload,n="Invalid IconifyPreload syntax.";"object"==typeof t&&null!==t&&(t instanceof Array?t:[t]).forEach((e=>{try{("object"!=typeof e||null===e||e instanceof Array||"object"!=typeof e.icons||"string"!=typeof e.prefix||!O(e))&&console.error(n)}catch(e){console.error(n)}}))}setTimeout((()=>{(function(e){const t=null!==Je;Je!==e&&(Je=e,t&&ze().forEach(Ke)),t?Ve():function(e){const t=document;"complete"===t.readyState||"loading"!==t.readyState&&!t.documentElement.doScroll?e():(t.addEventListener("DOMContentLoaded",e),window.addEventListener("load",e))}(Ve)})(it),it()}))}if(Z("",ve?ge:pe),"undefined"!=typeof document&&"undefined"!=typeof window){K.store=(e,t)=>{function n(n){if(!q[n])return!1;const o=G(n);if(!o)return!1;let r=_[n].shift();if(void 0===r&&(r=J[n],!Y(o,n,r+1)))return!1;try{const n={cached:Math.floor(Date.now()/U),provider:e,data:t};o.setItem(D+r,JSON.stringify(n))}catch(e){return!1}return!0}z||V(),n("local")||n("session")},V();const e=window;if(void 0!==e.IconifyProviders){const t=e.IconifyProviders;if("object"==typeof t&&null!==t)for(const e in t){const n="IconifyProviders["+e+"] is invalid.";try{const o=t[e];if("object"!=typeof o||!o||void 0===o.resources)continue;ie(e,o)||console.error(n)}catch(e){console.error(n)}}}}const pt={_api:{getAPIConfig:ce,setAPIModule:Z,sendAPIQuery:Ie,setFetch:function(e){ve=e,Z("",ge)},listAPIProviders:function(){return Object.keys(ne)},mergeParams:se},addAPIProvider:ie,loadIcons:Ne,iconExists:function(e){return null!==j(e)},getIcon:function(e){const t=j(e);return t?{...t}:null},listIcons:function(e,t){let n,o=[];return n="string"==typeof e?[e]:Object.keys(g),n.forEach((e=>{let n;n="string"==typeof e&&"string"==typeof t?[t]:void 0===g[e]?[]:Object.keys(g[e]),n.forEach((t=>{const n=b(e,t),r=Object.keys(n.icons).map((n=>(""!==e?"@"+e+":":"")+t+":"+n));o=o.concat(r)}))})),o},addIcon:E,addCollection:O,replaceIDs:N,calculateSize:A,buildIcon:function(e,t){return M(u(e),t?I(k,t):k)},getVersion:function(){return"2.1.0"},renderSVG:function(e,t){return ft(e,t,!1)},renderHTML:function(e,t){return ft(e,t,!0)},renderIcon:function(e,t){const n=j(e);return n?M(n,I(k,"object"==typeof t?t:{})):null},scan:function(e){e?function(e){const t=Ue(e);t?it(t):it({node:e,temporary:!0},!0)}(e):it()},observe:Ze,stopObserving:et,pauseObserver:function(e){if(e){const t=Ue(e);t&&We(t)}else We()},resumeObserver:function(e){if(e){const t=Ue(e);t&&Xe(t)}else Xe()},enableCache:function(e,t){W(e,!1!==t)},disableCache:function(e){W(e,!0)}};try{void 0===self.Iconify&&(self.Iconify=pt)}catch(e){}const ht=n(413).contact;function mt(){const e=gt();return e.appendChild((()=>{const e=document.createElement("div");return e.append((()=>{const e=yt.title(ht.title);return e.id="contact-title",e})(),(()=>{const e=yt.subtitle(ht.subtitle);return e.id="contact-subtitle",e})()),e.id="contact-header",e.classList.add("header"),e})()),e.appendChild((()=>{const e=document.createElement("div");return e.id="contact-body",e.appendChild((()=>{const e=wt();e.el.id="contact-social";const t=e.body;return t.id="social-body",Object.values({phone:{icon:"akar-icons:phone",text:"+62 554-248-9874"},email:{icon:"ant-design:mail-outlined",text:"restaurant@itshiroto.com"},insta:{icon:"akar-icons:instagram-fill",text:"@lerestaurantdehiroto"}}).forEach((e=>{let n=document.createElement("div"),o=document.createElement("span"),r=document.createElement("p");o.classList.add("iconify"),o.dataset.icon=e.icon,r.textContent=e.text,n.append(o,r),n.classList.add("social-item"),t.appendChild(n)})),e.el})()),e.appendChild((()=>{const e=wt();e.el.id="contact-map";const t=e.body;t.id="map-body";const n=document.createElement("iframe");return n.src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3986.986062150584!2d117.50610719999999!3d2.1590027!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x320df5096bf5b341%3A0xdd54ae1f51ee7897!2sJembatan%20Sambaliung!5e0!3m2!1sen!2sid!4v1641271538347!5m2!1sen!2sid",n.id="map-iframe",n.loading="lazy",t.appendChild(n),e.el})()),e})()),e}function vt(e){const t=document.querySelector("#content");switch(e=e.toLowerCase(),t.innerHTML&&(t.innerHTML=""),e){case"home":t.appendChild(i());break;case"menu":t.appendChild(s());break;case"contact":t.appendChild(mt());break;default:console.warn("There's no page with that name")}}function gt(){const e=document.createElement("div");return e.classList.add("container"),e}const bt=(()=>{let e=o;return()=>{const t=(()=>{const e=document.createElement("div");return e.id="nav-bar",e})();return t.appendChild((()=>{const t=document.createElement("div");return t.id="nav-menu",t.classList.add("flex","al-center","jc-center"),e.forEach((e=>{let n=document.createElement("a");n.innerText=e.title,n.classList.add("nav-item","flex","jc-center","al-center"),n.addEventListener("click",(()=>{!function(e){e=e.toLowerCase(),window.history.pushState("","",`?page=${e}`)}(e.title),vt(e.title)})),t.appendChild(n)})),t})()),t}})(),yt={title:function(e){const t=document.createElement("h1");return t.classList.add("title"),t.innerHTML=e,t},subtitle:function(e){const t=document.createElement("h2");return t.classList.add("subtitle"),t.innerHTML=e,t},description:function(e){const t=document.createElement("p");return t.classList.add("desc"),t.innerHTML=e,t}},wt=e=>{const t=document.createElement("div");t.classList.add("card");const o=document.createElement("div");return o.classList.add("card-body"),e&&(e.name&&o.appendChild(function(e){const t=document.createElement("h1");return t.classList.add("card-title"),t.innerHTML=e,t}(e.name)),e.price&&o.appendChild(function(e){const t=document.createElement("h3");return t.classList.add("card-price"),t.innerHTML=e,t}(e.price)),e.desc&&o.appendChild(function(e){const t="object"==typeof e?document.createElement("div"):document.createElement("p");return t.classList.add("card-desc"),t.innerHTML=e,t}(e.desc)),e.img&&t.appendChild(function(e){const t=document.createElement("div");t.classList.add("card-pic");const o=new Image;return o.src=n(66)("./"+e),t.appendChild(o),t}(e.img))),t.appendChild(o),{el:t,body:o}},xt=(()=>{const e=document.getElementsByTagName("body")[0],t=new URLSearchParams(window.location.search).get("page");return()=>{e.prepend(bt()),vt(t||"home")}})();xt()},439:(e,t,n)=>{"use strict";e.exports=n.p+"d64b033acad66fd97862.jpg"},446:(e,t,n)=>{"use strict";e.exports=n.p+"ee7928942265604ae295.png"},413:e=>{"use strict";e.exports=JSON.parse('{"home":{"title":"Finest food<br>on the city","subtitle":"Le Restaurant de Hiroto","desc":"One of the best restaurant with beautiful looking view and delicious food. You will be mesmerized by the taste and the place of this beautiful restaurant."},"menu":{"title":"Menu","subtitle":"All ranged from affordable to luxurious."},"contact":{"title":"Contact","subtitle":"Get more information about reservation booking, and more."}}')}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(534)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,